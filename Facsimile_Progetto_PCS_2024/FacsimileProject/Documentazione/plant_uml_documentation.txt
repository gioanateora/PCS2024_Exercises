' Ogni codice UML inizia e termina con staruml - enduml
@startuml 

title Compute polygon area

' Create package with folder style
package GeometryLibrary <<Folder>>
{

class Polygon{
' Visibility NameVaribale : Type
+ VerticesCoordinates : MatrixXd
+ listVertices : std::vector<std::vector<unsigned int>>
+ Polygon()
+ Polygon(VerticesCoordinates, listVertices)
+ void GedimInterface(vector<vector<unsigned int>>& triangles,
                        \t \t \t  \t \t VectorXi& materials)
+ vector<double> computePolygonsArea()
+ vector<vector<vector<unsigned int>>> TriangulatePolygons()
.. Non member function ..

void importPolygonsList(const string& filepath,
\t \t \t                    Polygons& polygons)

.. TESTPOLYGON ..

TestComputePolygonsArea
TestGedimInterface
}


class Triangle{
+ Vertices : Matrix3d
+ Triangle(Vertices : Matrix3d)
+ double ComputeArea()
.. TESTTRIANGLE ..
TestComputeArea
}

' Modeling relationship: https://blog.visual-paradigm.com/what-are-the-six-types-of-relationships-in-uml-class-diagrams/#:~:text=There%20are%20six%20main%20types,aggregation%20%2C%20association%2C%20and%20dependency%20.

' Left, right, up, down to try to orient classes in the space based on their relationship

' Aggregazione
Polygon "1" o-left- "many" Triangle : is made up of

}


package Gedim <<Frame>>
{

}


' PlotPolygon relies upon Gedim
Polygon::GedimInterface --right--> Gedim

' Add notes and link it with an object thourgh the sumbol ..
note "This is an external package" as GedimNote
GedimNote .. Gedim

@enduml
